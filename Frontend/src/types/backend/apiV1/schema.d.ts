/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/schedules/{scheduleId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 일정 조회
         * @description 일정 조회는 모임의 참여자만 가능
         */
        get: operations["getSchedule"];
        /**
         * 일정 수정
         * @description 일정 수정은 호스트 또는 매니저 권한이 있는 사용자만 가능
         */
        put: operations["modifySchedule"];
        post?: never;
        /**
         * 일정 삭제
         * @description 일정 삭제는 호스트 또는 매니저 권한이 있는 사용자만 가능
         */
        delete: operations["deleteSchedule"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/presets/{presetId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 프리셋 조회 */
        get: operations["getPreset"];
        /** 프리셋 수정 */
        put: operations["updatePreset"];
        post?: never;
        /** 프리셋 삭제 */
        delete: operations["deletePreset"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/members/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 내 정보 반환 API
         * @description 현재 로그인한 유저 정보를 반환하는 API 입니다.
         */
        get: operations["getMyInfo"];
        /**
         * 내 정보 수정 API
         * @description 현재 로그인한 유저 정보를 수정하는 API 입니다.
         */
        put: operations["updateInfo"];
        post?: never;
        /**
         * 회원탈퇴 API
         * @description 회원탈퇴 처리 API 입니다.
         */
        delete: operations["withdrawMembership"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/clubs/{clubId}/members/{memberId}/role": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** 클럽 멤버 권한 변경 */
        put: operations["changeMemberRole"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/checklists/{checkListId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 체크리스트 조회 */
        get: operations["getCheckList"];
        /** 체크리스트 수정 */
        put: operations["updateCheckList"];
        post?: never;
        /** 체크리스트 삭제 */
        delete: operations["deleteCheckList"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/schedules": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 일정 생성
         * @description 일정 생성은 호스트 또는 매니저 권한이 있는 사용자만 가능
         */
        post: operations["createSchedule"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/presets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 프리셋 목록 조회 */
        get: operations["getPresetList"];
        put?: never;
        /** 프리셋 생성 */
        post: operations["write"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/my-clubs/{clubId}/apply": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 클럽 가입 신청 */
        post: operations["applyForPublicClub"];
        /** 클럽 가입 신청 취소 */
        delete: operations["cancelClubApplication"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/members/me/friends": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 내 친구 목록 조회 */
        get: operations["getFriends"];
        put?: never;
        /** 친구 추가 */
        post: operations["addFriend"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/members/auth/verify-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 비밀번호 유효성 검사 API
         * @description 비밀번호의 유효성을 인증하는 API 입니다.
         */
        post: operations["checkPasswordValidity"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/members/auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 회원가입 API
         * @description 이메일, 비밀번호 등을 받아 회원가입을 처리합니다.
         */
        post: operations["register"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/members/auth/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * access token 재발급 API
         * @description 리프레시 토큰으로 access token을 재발급하는 API 입니다.
         */
        post: operations["apiTokenReissue"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/members/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 로그인 API
         * @description 이메일과 비밀번호를 받아 로그인을 처리합니다.
         */
        post: operations["login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/members/auth/guest-register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 비회원 모임 등록 API
         * @description 비회원 모임 등록 API 입니다.
         */
        post: operations["registerGuest"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/members/auth/guest-login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * 비회원 임시 로그인 API
         * @description 비회원 임시 로그인 API 입니다.
         */
        post: operations["guestLogin"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/clubs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 클럽 생성 */
        post: operations["createClub"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/clubs/{clubId}/members": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 클럽 멤버 목록 조회 */
        get: operations["getClubMembers"];
        put?: never;
        /** 클럽에 멤버 추가 */
        post: operations["addMembersToClub"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/clubs/{clubId}/members/invitation-link": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 클럽 초대 링크 반환 */
        get: operations["getExistingClubLink"];
        put?: never;
        /** 클럽 초대 링크 생성 */
        post: operations["createClubLink"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/clubs/invitations/{token}/apply": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 로그인 유저 - 초대 링크를 통한 비공개 클럽 가입 신청 */
        post: operations["applyToClubByInvitationToken"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/checklists": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** 체크리스트 생성 */
        post: operations["write_1"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/my-clubs/{clubId}/join": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** 클럽 초대 수락 */
        patch: operations["acceptClubInvitation"];
        trace?: never;
    };
    "/api/v1/members/me/friends/{friendId}/reject": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** 친구 요청 거절 */
        patch: operations["rejectFriend"];
        trace?: never;
    };
    "/api/v1/members/me/friends/{friendId}/accept": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** 친구 요청 수락 */
        patch: operations["acceptFriend"];
        trace?: never;
    };
    "/api/v1/clubs/{clubId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 클럽 정보 조회 */
        get: operations["getClubInfo"];
        put?: never;
        post?: never;
        /** 클럽 삭제 */
        delete: operations["deleteClub"];
        options?: never;
        head?: never;
        /** 클럽 수정 */
        patch: operations["updateClubInfo"];
        trace?: never;
    };
    "/api/v1/clubs/{clubId}/members/{memberId}/approval": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** 클럽 가입 신청 거절 */
        delete: operations["rejectMemberApplication"];
        options?: never;
        head?: never;
        /** 클럽 가입 신청 승인 */
        patch: operations["approveMemberApplication"];
        trace?: never;
    };
    "/api/v1/schedules/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 나의 일정 목록 조회 */
        get: operations["getMySchedules"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/schedules/clubs/{clubId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * 모임의 일정 목록 조회
         * @description 모임의 일정 목록 조회는 모임의 참여자만 가능
         */
        get: operations["getClubSchedules"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/presets/platform": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 특정 모임 카테고리의 프리셋 목록 */
        get: operations["getPresetListByCategory"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/my-clubs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 내 클럽 목록 조회 */
        get: operations["getMyClubs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/my-clubs/{clubId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 클럽에서 내 정보 조회 */
        get: operations["getMyClubInfo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/clubs/public": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 공개 클럽 목록 조회 (페이징 가능) */
        get: operations["getPublicClubs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/clubs/invitations/{token}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 클럽 초대 링크용 클럽 정보 반환 */
        get: operations["getClubInfoByInvitationToken"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/checklists/group/{groupId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 체크리스트 목록 조회 */
        get: operations["getCheckListByGroupId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/my-clubs/{clubId}/withdraw": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** 클럽 탈퇴 */
        delete: operations["withdrawFromClub"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/my-clubs/{clubId}/invitation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** 클럽 초대 거절 */
        delete: operations["rejectClubInvitation"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/members/me/friends/{friendId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** 친구 삭제 */
        delete: operations["deleteFriend"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/members/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * 로그아웃 API
         * @description 로그아웃 처리 API입니다.
         */
        delete: operations["logout"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/clubs/{clubId}/members/{memberId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** 클럽에서 멤버 탈퇴 */
        delete: operations["withdrawMemberFromClub"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        RsDataVoid: {
            /** Format: int32 */
            code?: number;
            message?: string;
            data?: Record<string, never>;
        };
        ScheduleUpdateReqBody: {
            /** @description 일정 제목 */
            title: string;
            /** @description 일정 내용 */
            content: string;
            /**
             * Format: date-time
             * @description 일정 시작일
             */
            startDate: string;
            /**
             * Format: date-time
             * @description 일정 종료일
             */
            endDate: string;
            /** @description 일정 장소 */
            spot: string;
        };
        RsDataScheduleDetailDto: {
            /** Format: int32 */
            code?: number;
            message?: string;
            data?: components["schemas"]["ScheduleDetailDto"];
        };
        ScheduleDetailDto: {
            /**
             * Format: int64
             * @description 일정 ID
             */
            id?: number;
            /** @description 일정 제목 */
            title?: string;
            /** @description 일정 내용 */
            content?: string;
            /**
             * Format: date-time
             * @description 일정 시작일
             */
            startDate?: string;
            /**
             * Format: date-time
             * @description 일정 종료일
             */
            endDate?: string;
            /** @description 일정 장소 */
            spot?: string;
            /**
             * Format: int64
             * @description 모임 ID
             */
            clubId?: number;
            /**
             * Format: int64
             * @description 체크리스트 ID
             */
            checkListId?: number | null;
        };
        PresetItemWriteReqDto: {
            content: string;
            /** @enum {string} */
            category: "PREPARATION" | "RESERVATION" | "PRE_WORK" | "ETC";
            /** Format: int32 */
            sequence?: number;
        };
        PresetWriteReqDto: {
            name: string;
            presetItems?: components["schemas"]["PresetItemWriteReqDto"][];
        };
        PresetDto: {
            /** Format: int64 */
            id?: number;
            name?: string;
            presetItems?: components["schemas"]["PresetItemDto"][];
        };
        PresetItemDto: {
            /** Format: int64 */
            id?: number;
            content?: string;
            /** @enum {string} */
            category?: "PREPARATION" | "RESERVATION" | "PRE_WORK" | "ETC";
            /** Format: int32 */
            sequence?: number;
        };
        RsDataPresetDto: {
            /** Format: int32 */
            code?: number;
            message?: string;
            data?: components["schemas"]["PresetDto"];
        };
        UpdateMemberInfoDto: {
            nickname?: string;
            password?: string;
            bio?: string;
        };
        MemberDetailInfoResponse: {
            nickname?: string;
            email?: string;
            bio?: string;
            profileImage?: string;
            tag?: string;
        };
        RsDataMemberDetailInfoResponse: {
            /** Format: int32 */
            code?: number;
            message?: string;
            data?: components["schemas"]["MemberDetailInfoResponse"];
        };
        ClubMemberRoleChangeRequest: {
            role: string;
        };
        CheckListItemWriteReqDto: {
            content: string;
            /** @enum {string} */
            category: "PREPARATION" | "RESERVATION" | "PRE_WORK" | "ETC";
            /** Format: int32 */
            sequence?: number;
            isChecked?: boolean;
            itemAssigns?: components["schemas"]["ItemAssignReqDto"][];
        };
        CheckListUpdateReqDto: {
            checkListItems?: components["schemas"]["CheckListItemWriteReqDto"][];
        };
        ItemAssignReqDto: {
            /** Format: int64 */
            clubMemberId: number;
            isChecked?: boolean;
        };
        CheckListDto: {
            /** Format: int64 */
            id?: number;
            isActive?: boolean;
            schedule?: components["schemas"]["ScheduleDto"];
            checkListItems?: components["schemas"]["CheckListItemDto"][];
        };
        CheckListItemDto: {
            /** Format: int64 */
            id?: number;
            content?: string;
            /** @enum {string} */
            category?: "PREPARATION" | "RESERVATION" | "PRE_WORK" | "ETC";
            /** Format: int32 */
            sequence?: number;
            isChecked?: boolean;
            itemAssigns?: components["schemas"]["ItemAssignDto"][];
        };
        ItemAssignDto: {
            /** Format: int64 */
            id?: number;
            /** Format: int64 */
            clubMemberId?: number;
            clubMemberName?: string;
            isChecked?: boolean;
        };
        RsDataCheckListDto: {
            /** Format: int32 */
            code?: number;
            message?: string;
            data?: components["schemas"]["CheckListDto"];
        };
        ScheduleDto: {
            /**
             * Format: int64
             * @description 일정 ID
             */
            id?: number;
            /** @description 일정 제목 */
            title?: string;
            /**
             * Format: date-time
             * @description 일정 시작일
             */
            startDate?: string;
            /**
             * Format: date-time
             * @description 일정 종료일
             */
            endDate?: string;
            /**
             * Format: int64
             * @description 모임 ID
             */
            clubId?: number;
            /**
             * Format: int64
             * @description 체크리스트 ID
             */
            checkListId?: number | null;
        };
        ScheduleCreateReqBody: {
            /**
             * Format: int64
             * @description 모임 ID
             */
            clubId: number;
            /** @description 일정 제목 */
            title: string;
            /** @description 일정 내용 */
            content: string;
            /**
             * Format: date-time
             * @description 일정 시작일
             */
            startDate: string;
            /**
             * Format: date-time
             * @description 일정 종료일
             */
            endDate: string;
            /** @description 일정 장소 */
            spot: string;
        };
        RsDataSimpleClubInfo: {
            /** Format: int32 */
            code?: number;
            message?: string;
            data?: components["schemas"]["SimpleClubInfo"];
        };
        SimpleClubInfo: {
            /** Format: int64 */
            clubId?: number;
            clubName?: string;
        };
        FriendAddReqBody: {
            /** @description 친구 요청 대상의 이메일 */
            friend_email: string;
        };
        FriendDto: {
            /**
             * Format: int64
             * @description 친구 ID
             */
            friendId?: number;
            /**
             * Format: int64
             * @description 친구(회원) ID
             */
            friendMemberId?: number;
            /** @description 친구(회원) 닉네임 */
            friendNickname?: string;
            /** @description 친구(회원) 자기소개 */
            friendBio?: string;
            /** @description 친구(회원) 프로필 이미지 URL */
            friendProfileImageUrl?: string;
            /**
             * @description 친구 관계
             * @enum {string}
             */
            status?: "PENDING" | "ACCEPTED" | "REJECTED";
        };
        RsDataFriendDto: {
            /** Format: int32 */
            code?: number;
            message?: string;
            data?: components["schemas"]["FriendDto"];
        };
        PasswordCheckRequestDto: {
            password: string;
        };
        MemberPasswordResponse: {
            verified?: boolean;
        };
        RsDataMemberPasswordResponse: {
            /** Format: int32 */
            code?: number;
            message?: string;
            data?: components["schemas"]["MemberPasswordResponse"];
        };
        MemberRegisterDto: {
            /**
             * @description 회원 이메일
             * @example test@example.com
             */
            email: string;
            /**
             * @description 회원 비밀번호
             * @example example123
             */
            password: string;
            /**
             * @description 회원 닉네임
             * @example testUser1
             */
            nickname: string;
            /**
             * @description 회원 자기소개
             * @example 안녕하세요. 반갑습니다.
             */
            bio?: string;
        };
        MemberAuthResponse: {
            apikey?: string;
            accessToken?: string;
        };
        RsDataMemberAuthResponse: {
            /** Format: int32 */
            code?: number;
            message?: string;
            data?: components["schemas"]["MemberAuthResponse"];
        };
        TokenRefreshRequest: {
            refreshToken: string;
        };
        MemberLoginDto: {
            email: string;
            password: string;
        };
        GuestDto: {
            nickname: string;
            password: string;
            /** Format: int64 */
            clubId: number;
        };
        GuestResponse: {
            nickname?: string;
            accessToken?: string;
            /** Format: int64 */
            clubId?: number;
        };
        RsDataGuestResponse: {
            /** Format: int32 */
            code?: number;
            message?: string;
            data?: components["schemas"]["GuestResponse"];
        };
        CreateClubRequest: {
            name: string;
            bio: string;
            category: string;
            mainSpot: string;
            /** Format: int32 */
            maximumCapacity?: number;
            eventType: string;
            startDate: string;
            endDate: string;
            isPublic: boolean;
            clubMembers?: components["schemas"]["CreateClubRequestMemberInfo"][];
        };
        CreateClubRequestMemberInfo: {
            /** Format: int64 */
            id: number;
            role: string;
        };
        ClubResponse: {
            /** Format: int64 */
            clubId?: number;
            /** Format: int64 */
            leaderId?: number;
        };
        RsDataClubResponse: {
            /** Format: int32 */
            code?: number;
            message?: string;
            data?: components["schemas"]["ClubResponse"];
        };
        ClubMemberRegisterInfo: {
            email: string;
            role: string;
        };
        ClubMemberRegisterRequest: {
            members: components["schemas"]["ClubMemberRegisterInfo"][];
        };
        CreateClubLinkResponse: {
            link?: string;
        };
        RsDataCreateClubLinkResponse: {
            /** Format: int32 */
            code?: number;
            message?: string;
            data?: components["schemas"]["CreateClubLinkResponse"];
        };
        RsDataObject: {
            /** Format: int32 */
            code?: number;
            message?: string;
            data?: Record<string, never>;
        };
        CheckListWriteReqDto: {
            /** Format: int64 */
            scheduleId: number;
            checkListItems?: components["schemas"]["CheckListItemWriteReqDto"][];
        };
        UpdateClubRequest: {
            name?: string;
            bio?: string;
            category?: string;
            mainSpot?: string;
            /** Format: int32 */
            maximumCapacity?: number;
            recruitingStatus?: boolean;
            eventType?: string;
            startDate?: string;
            endDate?: string;
            isPublic?: boolean;
        };
        RsDataListScheduleWithClubDto: {
            /** Format: int32 */
            code?: number;
            message?: string;
            data?: components["schemas"]["ScheduleWithClubDto"][];
        };
        ScheduleWithClubDto: {
            /**
             * Format: int64
             * @description 일정 ID
             */
            id?: number;
            /** @description 일정 제목 */
            title?: string;
            /**
             * Format: date-time
             * @description 일정 시작일
             */
            startDate?: string;
            /**
             * Format: date-time
             * @description 일정 종료일
             */
            endDate?: string;
            /**
             * Format: int64
             * @description 모임 ID
             */
            clubId?: number;
            /** @description 모임명 */
            clubName?: string;
            /**
             * Format: int64
             * @description 체크리스트 ID
             */
            checkListId?: number | null;
        };
        RsDataListScheduleDto: {
            /** Format: int32 */
            code?: number;
            message?: string;
            data?: components["schemas"]["ScheduleDto"][];
        };
        RsDataListPresetDto: {
            /** Format: int32 */
            code?: number;
            message?: string;
            data?: components["schemas"]["PresetDto"][];
        };
        ClubListItem: {
            /** Format: int64 */
            clubId?: number;
            clubName?: string;
            bio?: string;
            /** @enum {string} */
            category?: "STUDY" | "HOBBY" | "SPORTS" | "TRAVEL" | "CULTURE" | "FOOD" | "PARTY" | "WORK" | "OTHER";
            imageUrl?: string;
            mainSpot?: string;
            /** @enum {string} */
            eventType?: "ONE_TIME" | "SHORT_TERM" | "LONG_TERM";
            /** Format: date */
            startDate?: string;
            /** Format: date */
            endDate?: string;
            isPublic?: boolean;
            /** @enum {string} */
            myRole?: "PARTICIPANT" | "MANAGER" | "HOST";
            /** @enum {string} */
            myState?: "INVITED" | "JOINING" | "APPLYING" | "WITHDRAWN";
        };
        MyClubList: {
            clubs?: components["schemas"]["ClubListItem"][];
        };
        RsDataMyClubList: {
            /** Format: int32 */
            code?: number;
            message?: string;
            data?: components["schemas"]["MyClubList"];
        };
        MyInfoInClub: {
            /** Format: int64 */
            clubMemberId?: number;
            /** Format: int64 */
            clubId?: number;
            clubName?: string;
            /** @enum {string} */
            role?: "PARTICIPANT" | "MANAGER" | "HOST";
            /** @enum {string} */
            state?: "INVITED" | "JOINING" | "APPLYING" | "WITHDRAWN";
        };
        RsDataMyInfoInClub: {
            /** Format: int32 */
            code?: number;
            message?: string;
            data?: components["schemas"]["MyInfoInClub"];
        };
        RsDataListFriendDto: {
            /** Format: int32 */
            code?: number;
            message?: string;
            data?: components["schemas"]["FriendDto"][];
        };
        ClubInfoResponse: {
            /** Format: int64 */
            clubId?: number;
            name?: string;
            bio?: string;
            category?: string;
            mainSpot?: string;
            /** Format: int32 */
            maximumCapacity?: number;
            recruitingStatus?: boolean;
            eventType?: string;
            startDate?: string;
            endDate?: string;
            isPublic?: boolean;
            imageUrl?: string;
            /** Format: int64 */
            leaderId?: number;
            leaderName?: string;
        };
        RsDataClubInfoResponse: {
            /** Format: int32 */
            code?: number;
            message?: string;
            data?: components["schemas"]["ClubInfoResponse"];
        };
        ClubMemberInfo: {
            /** Format: int64 */
            clubMemberId?: number;
            /** Format: int64 */
            memberId?: number;
            nickname?: string;
            tag?: string;
            /** @enum {string} */
            role?: "PARTICIPANT" | "MANAGER" | "HOST";
            email?: string;
            /** @enum {string} */
            memberType?: "MEMBER" | "GUEST";
            profileImageUrl?: string;
            /** @enum {string} */
            state?: "INVITED" | "JOINING" | "APPLYING" | "WITHDRAWN";
        };
        ClubMemberResponse: {
            members?: components["schemas"]["ClubMemberInfo"][];
        };
        RsDataClubMemberResponse: {
            /** Format: int32 */
            code?: number;
            message?: string;
            data?: components["schemas"]["ClubMemberResponse"];
        };
        PageSimpleClubInfoWithoutLeader: {
            /** Format: int64 */
            totalElements?: number;
            /** Format: int32 */
            totalPages?: number;
            /** Format: int32 */
            numberOfElements?: number;
            /** Format: int32 */
            size?: number;
            content?: components["schemas"]["SimpleClubInfoWithoutLeader"][];
            /** Format: int32 */
            number?: number;
            sort?: components["schemas"]["SortObject"];
            first?: boolean;
            last?: boolean;
            pageable?: components["schemas"]["PageableObject"];
            empty?: boolean;
        };
        PageableObject: {
            /** Format: int64 */
            offset?: number;
            sort?: components["schemas"]["SortObject"];
            paged?: boolean;
            /** Format: int32 */
            pageSize?: number;
            /** Format: int32 */
            pageNumber?: number;
            unpaged?: boolean;
        };
        RsDataPageSimpleClubInfoWithoutLeader: {
            /** Format: int32 */
            code?: number;
            message?: string;
            data?: components["schemas"]["PageSimpleClubInfoWithoutLeader"];
        };
        SimpleClubInfoWithoutLeader: {
            /** Format: int64 */
            clubId?: number;
            name?: string;
            category?: string;
            imageUrl?: string;
            mainSpot?: string;
            eventType?: string;
            startDate?: string;
            endDate?: string;
            bio?: string;
        };
        SortObject: {
            empty?: boolean;
            sorted?: boolean;
            unsorted?: boolean;
        };
        RsDataSimpleClubInfoResponse: {
            /** Format: int32 */
            code?: number;
            message?: string;
            data?: components["schemas"]["SimpleClubInfoResponse"];
        };
        SimpleClubInfoResponse: {
            /** Format: int64 */
            clubId?: number;
            name?: string;
            category?: string;
            imageUrl?: string;
            mainSpot?: string;
            eventType?: string;
            startDate?: string;
            endDate?: string;
            /** Format: int64 */
            leaderId?: number;
            leaderName?: string;
        };
        RsDataListCheckListDto: {
            /** Format: int32 */
            code?: number;
            message?: string;
            data?: components["schemas"]["CheckListDto"][];
        };
        MemberWithdrawMembershipResponse: {
            /**
             * @description 회원 닉네임
             * @example testUser1
             */
            nickname?: string;
            /**
             * @description 회원 태그
             * @example 2345
             */
            tag?: string;
        };
        RsDataMemberWithdrawMembershipResponse: {
            /** Format: int32 */
            code?: number;
            message?: string;
            data?: components["schemas"]["MemberWithdrawMembershipResponse"];
        };
        FriendMemberDto: {
            /**
             * Format: int64
             * @description 친구(회원) ID
             */
            friendMemberId?: number;
            /** @description 친구(회원) 닉네임 */
            friendNickname?: string;
            /** @description 친구(회원) 자기소개 */
            friendBio?: string;
            /** @description 친구(회원) 프로필 이미지 URL */
            friendProfileImageUrl?: string;
        };
        RsDataFriendMemberDto: {
            /** Format: int32 */
            code?: number;
            message?: string;
            data?: components["schemas"]["FriendMemberDto"];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getSchedule: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                scheduleId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataScheduleDetailDto"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
                };
            };
        };
    };
    modifySchedule: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                scheduleId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ScheduleUpdateReqBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataScheduleDetailDto"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
                };
            };
        };
    };
    deleteSchedule: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                scheduleId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
                };
            };
        };
    };
    getPreset: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                presetId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataPresetDto"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
                };
            };
        };
    };
    updatePreset: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                presetId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PresetWriteReqDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataPresetDto"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
                };
            };
        };
    };
    deletePreset: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                presetId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
                };
            };
        };
    };
    getMyInfo: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataMemberDetailInfoResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
                };
            };
        };
    };
    updateInfo: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    data: components["schemas"]["UpdateMemberInfoDto"];
                    /** Format: binary */
                    profileImage?: string;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataMemberDetailInfoResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
                };
            };
        };
    };
    withdrawMembership: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataMemberWithdrawMembershipResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
                };
            };
        };
    };
    changeMemberRole: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                clubId: number;
                memberId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ClubMemberRoleChangeRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
                };
            };
        };
    };
    getCheckList: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                checkListId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataCheckListDto"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
                };
            };
        };
    };
    updateCheckList: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                checkListId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CheckListUpdateReqDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataCheckListDto"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
                };
            };
        };
    };
    deleteCheckList: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                checkListId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataCheckListDto"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
                };
            };
        };
    };
    createSchedule: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ScheduleCreateReqBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataScheduleDetailDto"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
                };
            };
        };
    };
    getPresetList: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataListPresetDto"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
                };
            };
        };
    };
    write: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PresetWriteReqDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataPresetDto"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
                };
            };
        };
    };
    applyForPublicClub: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                clubId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataSimpleClubInfo"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
                };
            };
        };
    };
    cancelClubApplication: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                clubId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataSimpleClubInfo"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
                };
            };
        };
    };
    getFriends: {
        parameters: {
            query?: {
                status?: "SENT" | "RECEIVED" | "ACCEPTED" | "REJECTED" | "ALL";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataListFriendDto"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
                };
            };
        };
    };
    addFriend: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FriendAddReqBody"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataFriendDto"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
                };
            };
        };
    };
    checkPasswordValidity: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PasswordCheckRequestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataMemberPasswordResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
                };
            };
        };
    };
    register: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MemberRegisterDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataMemberAuthResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
                };
            };
        };
    };
    apiTokenReissue: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TokenRefreshRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataMemberAuthResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
                };
            };
        };
    };
    login: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MemberLoginDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataMemberAuthResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
                };
            };
        };
    };
    registerGuest: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GuestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataGuestResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
                };
            };
        };
    };
    guestLogin: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GuestDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataGuestResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
                };
            };
        };
    };
    createClub: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    data: components["schemas"]["CreateClubRequest"];
                    /** Format: binary */
                    image?: string;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataClubResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
                };
            };
        };
    };
    getClubMembers: {
        parameters: {
            query?: {
                state?: string;
            };
            header?: never;
            path: {
                clubId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataClubMemberResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
                };
            };
        };
    };
    addMembersToClub: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                clubId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ClubMemberRegisterRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
                };
            };
        };
    };
    getExistingClubLink: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                clubId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataCreateClubLinkResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
                };
            };
        };
    };
    createClubLink: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                clubId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataCreateClubLinkResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
                };
            };
        };
    };
    applyToClubByInvitationToken: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataObject"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
                };
            };
        };
    };
    write_1: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CheckListWriteReqDto"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataCheckListDto"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
                };
            };
        };
    };
    acceptClubInvitation: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                clubId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataSimpleClubInfo"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
                };
            };
        };
    };
    rejectFriend: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                friendId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataFriendDto"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
                };
            };
        };
    };
    acceptFriend: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                friendId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataFriendDto"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
                };
            };
        };
    };
    getClubInfo: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                clubId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataClubInfoResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
                };
            };
        };
    };
    deleteClub: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                clubId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
                };
            };
        };
    };
    updateClubInfo: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                clubId: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    data: components["schemas"]["UpdateClubRequest"];
                    /** Format: binary */
                    image?: string;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataClubResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
                };
            };
        };
    };
    rejectMemberApplication: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                clubId: number;
                memberId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
                };
            };
        };
    };
    approveMemberApplication: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                clubId: number;
                memberId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
                };
            };
        };
    };
    getMySchedules: {
        parameters: {
            query?: {
                startDate?: string;
                endDate?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataListScheduleWithClubDto"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
                };
            };
        };
    };
    getClubSchedules: {
        parameters: {
            query?: {
                startDate?: string;
                endDate?: string;
            };
            header?: never;
            path: {
                clubId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataListScheduleDto"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
                };
            };
        };
    };
    getPresetListByCategory: {
        parameters: {
            query: {
                category: "STUDY" | "HOBBY" | "SPORTS" | "TRAVEL" | "CULTURE" | "FOOD" | "PARTY" | "WORK" | "OTHER";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataListPresetDto"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
                };
            };
        };
    };
    getMyClubs: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataMyClubList"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
                };
            };
        };
    };
    getMyClubInfo: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                clubId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataMyInfoInClub"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
                };
            };
        };
    };
    getPublicClubs: {
        parameters: {
            query?: {
                /** @description Zero-based page index (0..N) */
                page?: number;
                /** @description The size of the page to be returned */
                size?: number;
                /** @description Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported. */
                sort?: string[];
                name?: string;
                mainSpot?: string;
                category?: "STUDY" | "HOBBY" | "SPORTS" | "TRAVEL" | "CULTURE" | "FOOD" | "PARTY" | "WORK" | "OTHER";
                eventType?: "ONE_TIME" | "SHORT_TERM" | "LONG_TERM";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataPageSimpleClubInfoWithoutLeader"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
                };
            };
        };
    };
    getClubInfoByInvitationToken: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataSimpleClubInfoResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
                };
            };
        };
    };
    getCheckListByGroupId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                groupId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataListCheckListDto"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
                };
            };
        };
    };
    withdrawFromClub: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                clubId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataSimpleClubInfo"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
                };
            };
        };
    };
    rejectClubInvitation: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                clubId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataSimpleClubInfo"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
                };
            };
        };
    };
    deleteFriend: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                friendId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataFriendMemberDto"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
                };
            };
        };
    };
    logout: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataMemberAuthResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
                };
            };
        };
    };
    withdrawMemberFromClub: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                clubId: number;
                memberId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json;charset=UTF-8": components["schemas"]["RsDataVoid"];
                };
            };
        };
    };
}
